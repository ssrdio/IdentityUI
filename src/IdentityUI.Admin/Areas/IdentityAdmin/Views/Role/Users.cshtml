@using SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Views.Role.Components.RoleMenu
@model SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Models.Role.RoleMenuViewModel

@{
    SidebarSelection.SelectedOption = SidebarOptions.Role;
}

@{
    ViewData["Title"] = "Roles";
}

@section script{
    <script>

        $(document).ready(function () {
            new UserRoleTable('@Model.RoleId');
        });

        class UserRoleTable {
            constructor(roleId) {
                this.roleId = roleId;

                this.statusAlert = new StatusAlertComponent('#status-alert-container');

                this.confirmationModal = new conformationModal(
                    $('#modal-container'),
                    onYesClick => {
                        if (onYesClick === null || onYesClick === undefined) {
                            return;
                        }

                        if (onYesClick.key === 'removeUser') {
                            this.remove(onYesClick.id);
                        }
                    });

                this.$userRoleTable = $('#userTable');
                this.initTable();
            }

            initTable() {
                let usersUrl;

                @if(Model.Type == SSRD.IdentityUI.Core.Data.Enums.Entity.RoleTypes.Global)
                {
                    @: usersUrl = `/IdentityAdmin/Role/@Model.RoleId/User/GetGlobal`;
                }
                else if(Model.Type == SSRD.IdentityUI.Core.Data.Enums.Entity.RoleTypes.Group)
                {
                    @: usersUrl = `/IdentityAdmin/Role/@Model.RoleId/User/GetGroup`;
                }

                this.$userRoleTable.DataTable({
                    serverSide: true,
                    processing: true,
                    "targets": 'no-sort',
                    "bSort": false,
                    "order": [],
                    ajax: {
                        url: usersUrl,
                        type: 'GET'
                    },
                    columns: [
                        {
                            data: "userName",
                            title: "Username",
                            render: $.fn.dataTable.render.text()
                        },
                        @if(Model.Type == SSRD.IdentityUI.Core.Data.Enums.Entity.RoleTypes.Group)
                        {
                            <text>
                            {
                                data: "groupName",
                                title: "Group",
                                render: $.fn.dataTable.render.text()
                            },
                            </text>
                        }
                        {
                            data: null,
                            className: "dt-head-center",
                            width: "250px",
                            render: function (data) {
                                return `
                                <div">
                                    <a class="btn btn-primary table-button" href="@(string.Format(PagePath.USER_DETAILS, ""))${data.id}">Details</a>
                                    <button class="btn btn-danger table-button remove" data-id="${data.id}">Remove</a>
                                </div>`
                            }
                        }
                    ]});

                this.$userRoleTable.on('click', 'button.remove', (event) => {
                    let id = $(event.target).data("id");
                    this.confirmationModal.show({ key: 'removeUser', id: id }, 'Are you sure that you want to remove user from role?');
                });
            }

            reloadTable() {
                this.$userRoleTable
                    .DataTable()
                    .clear()
                    .draw();
            }

            remove(userId) {
                Api.post(`/IdentityAdmin/Role/${this.roleId}/User/Remove/${userId}`)
                    .done(() => {
                        this.reloadTable();
                        this.statusAlert.showSuccess('User was removed from role');
                    })
                    .fail((resp) => {
                        this.statusAlert.showErrors(resp.responeJSON['']);
                    })
            }
        }

    </script>
}

@section modal{
    <div id="modal-container">
        @await Component.InvokeAsync("InviteUserModal")
        @await Component.InvokeAsync("IdentityConfirmationModal")
    </div>
}

<div id="status-alert-container">
    @await Component.InvokeAsync("IdentityStatusAlertJs")
</div>

<div>
    @(await Component.InvokeAsync("RoleMenu", Model.ToComponentViewModel(RoleMenuViewComponent.TabSelected.Users)))

    <div class="tab-content">
        <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12 table-card">
            <div class="card-title-space">
                <h5 class="card-title">
                    Users
                </h5>
            </div>
            <div class="card-body">
                <div class="custom_container custom_table">
                    <table id="userTable" class="dataTableClass display "></table>
                </div>
            </div>
        </div>
    </div>
</div>