@model ClientMenuViewModel

@{
    ViewData["Title"] = "Client";
}

@section modal {
    <div id="modalContainer">
        @await Component.InvokeAsync("IdentityConfirmationModal")
    </div>
}

@await Component.InvokeAsync("ClientMenu", Model.ToMenuViewModel(ClientMenuViewComponent.TabSelected.Credentials))

<div id="status-alert">
    @await Component.InvokeAsync("IdentityStatusAlertJs")
</div>

<div class="tab-content">
    <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12 form-card">
        <div class="card-body">
            <div class="card-title-space">
                <h5 class="card-title">
                    Client Credentials
                </h5>
            </div>

            <div id="client-credentials-loader">
                @await Component.InvokeAsync("AdminUIDotLoader", new { showLoader = true })
            </div>

            <div id="client-credentials-form" class="custom-form" style="display:none;">
                <div id="client-id-input" class="form-group">
                    <label class="control-label">Client Id</label>
                    <div class="verify-email">
                        <input class="form-control" />
                        <button type="button" id="update-client-id" class="btn btn-primary">Update</button>
                    </div>
                    <span class="error text-danger"></span>
                </div>

                <div id="client-secret-input" class="form-group">
                    <label class="control-label">Client Secret</label>
                    <div id="clipboard-copy" style="display:none;">
                        <input id="clipboard-text" style="pointer-events:none" class="form-control" disabled />
                        <i class="far fa-clipboard"></i>
                        <p class="notice">IMPORTANT: You should copy this key, and save it some place safe, because it won't be visible here after leaving this page.</p>
                    </div>
                    <span class="error text-danger"></span>

                    <div class="button-holder">
                        <button type="button" class="btn btn-danger remove-button delete" style="display:none;">Delete secret</button>
                        <button type="button" class="btn btn-secondary custom-submit reset" style="display:none;">Reset secret</button>
                        <button type="button" class="btn btn-primary custom-submit request" style="display:none;">Add secret</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section script {
    <script type="text/javascript" src="~/adminUI/app/js/components/dot-loader.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            new ClientCredentials('@Model.Id')
        });

        class ClientCredentials {
            constructor(id) {
                this.id = id;
                this.statusAlert = new StatusAlertComponent('#status-alert');

                this.confirmationModal = new conformationModal(
                    $(`#modalContainer`),
                    onYesClick => {
                        if (onYesClick === null || onYesClick === undefined) {
                            return;
                        }

                        if (onYesClick.key === 'removeClientSecret') {
                            this.deleteClientSecret();
                        }

                        if (onYesClick.key === 'resetClientSecret') {
                            this.requestClientSecret();
                        }
                    }
                );

                this.$form = $('#client-credentials-form');
                this.loader = new DotLoader($('#client-credentials-loader'), this.$form);

                this.clientSecretInput = new InputComponent(this.$form, '#client-secret-input');
                this.clientIdInput = new InputComponent(this.$form, '#client-id-input');
                this.$requestButton = this.$form.find('button.request');
                this.$resetButton = this.$form.find('button.reset');
                this.$deleteButton = this.$form.find('button.delete');

                $('#update-client-id').on('click', () => {
                    this.updateClientId();
                });

                $('#clipboard-copy').on('click', () => {
                    var copyText = document.getElementById("clipboard-text");
                    copyText.select();
                    copyText.setSelectionRange(0, 99999); /* For mobile devices */
                    document.execCommand("copy");

                    this.statusAlert.showSuccess('Client Secret copied to clipboard');
                });

                this.$requestButton.on('click', () => {
                    this.requestClientSecret();
                });

                this.$resetButton.on('click', () => {
                    this.confirmationModal.show({ key: 'resetClientSecret' }, 'Are you sure you wish to reset Client Secret? Your previously set client secret will be deleted');
                });

                this.$deleteButton.on('click', () => {
                    this.confirmationModal.show({ key: 'removeClientSecret' }, 'Are you sure you want to remove Client Secret?');
                });

                this.getClientId();
                this.getClientSecret();
            }


            //Client ID
            getClientId() {
                this.loader.show();
                this.hideErrors();

                Api.get(`/api/IdentityAdmin/Client/GetClientId/${this.id}`)
                    .done((data) => {
                        this.clientIdInput.value(data.clientId);
                        this.loader.hide();
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON, 'clientId');
                        this.loader.hide();
                    });
            }

            getClientIdData() {
                return {
                    clientId: this.clientIdInput.value()
                }
            }

            updateClientId() {
                this.loader.show();
                this.hideErrors();

                Api.post(`/api/IdentityAdmin/Client/UpdateClientId/${this.id}`, this.getClientIdData())
                    .done((data) => {
                        this.clientIdInput.value(data.clientId);
                        this.loader.hide();
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON, 'clientId');
                        this.loader.hide();
                    });
            }


            //Client Secret
            getClientSecretData() {
                return {
                    clientsecret: this.clientSecretInput.value()
                };
            }

            getClientSecret() {
                this.loader.show();
                this.hideErrors();

                Api.get(`/api/IdentityAdmin/Client/GetClientSecret/${this.id}`)
                    .done((data) => {
                        if (data.isSecretSet) {
                            this.clientSecretShow(data);
                        } else {
                            this.clientSecretHide();
                        }
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON, 'clientSecret');
                        this.loader.hide();
                    });
            }

            requestClientSecret() {
                this.loader.show();
                this.hideErrors();

                Api.post(`/api/IdentityAdmin/Client/GenerateNewClientSecret/${this.id}`, this.getClientSecretData())
                    .done((data) => {
                        this.clientSecretShow(data);
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON, 'clientSecret');
                        this.loader.hide();
                    });
            }

            deleteClientSecret() {
                this.loader.show();
                this.hideErrors();

                Api.delete(`/api/IdentityAdmin/Client/DeleteClientSecret/${this.id}`)
                    .done((data) => {
                        this.clientSecretHide();
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON, 'clientSecret');
                        this.loader.hide();
                    });
            }

            clientSecretHide() {
                $('#clipboard-copy').hide();
                this.clientSecretInput.value(null);
                this.$requestButton.show();
                this.$resetButton.hide();
                this.$deleteButton.hide();
                this.loader.hide();
            }

            clientSecretShow(data) {
                if (data.secret) {
                    $('#clipboard-copy').show();
                    this.clientSecretInput.value(data.secret);
                }
                this.$requestButton.hide();
                this.$resetButton.show();
                this.$deleteButton.show();
                this.loader.hide();
            }

            //Default error handling
            showErrors(errors, item) {
                if (errors[''] !== null && errors[''] !== undefined) {
                    this.statusAlert.showErrors(errors['']);
                }

                if (item === 'clientId') {
                    this.clientIdInput.showError(errors.ClientId);
                } else {
                    this.clientSecretInput.showError(errors.ClientSecret);
                }

            }

            hideErrors() {
                this.statusAlert.hide();
                this.clientIdInput.hideError();
                this.clientSecretInput.hideError();
            }
        }
    </script>
}
