@model ClientMenuViewModel

@{
    ViewData["Title"] = "Client";
}

@section modal {
    <div id="modalContainer">
        @await Component.InvokeAsync("IdentityConfirmationModal")
    </div>
}

@await Component.InvokeAsync("ClientMenu", Model.ToMenuViewModel(ClientMenuViewComponent.TabSelected.Credentials))

<div id="status-alert">
    @await Component.InvokeAsync("IdentityStatusAlertJs")
</div>

<div class="tab-content">
    <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12">
        <div class="card-body">
            <div class="card-title-space">
                <h5 class="card-title">
                    Client Id
                </h5>
            </div>

            <div id="client-id-loader">
                @await Component.InvokeAsync("AdminUIDotLoader", new { showLoader = true })
            </div>

            <div id="client-id-form" class="custom-form" style="display:none;">
                <div id="client-id-input" class="form-group">
                    <label class="control-label">Client Id</label>
                    <input class="form-control" />
                    <span class="text-danger"></span>
                </div>

                <div class="button-holder">
                    <button type="button" class="btn btn-primary custom-submit update">Update</button>
                </div>
            </div>
        </div>
    </div>

    <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12">
        <div class="card-body">
            <div class="card-title-space">
                <h5 class="card-title">
                    Client Secret
                </h5>
            </div>

            <div id="client-secret-loader">
                @await Component.InvokeAsync("AdminUIDotLoader", new { showLoader = true })
            </div>

            <div id="client-secret-form" class="custom-form" style="display:none;">
                <div id="client-secret-input" class="form-group">
                    <label class="control-label">Client Secret</label>
                    <input class="form-control" />
                    <span class="text-danger"></span>
                </div>

                <div class="button-holder">
                    <button type="button" class="btn btn-primary custom-submit add" style="display:none;">Add</button>
                    <button type="button" class="btn btn-primary custom-submit update" style="display:none;">Update</button>
                    <button type="button" class="btn btn btn-danger remove-button delete" style="display:none;">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section script {
    <script type="text/javascript" src="~/adminUI/app/js/components/dot-loader.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            new ClientCredentials('@Model.Id')
        });

        class ClientCredentials {
            constructor(id) {
                const statusAlert = new StatusAlertComponent('#status-alert');

                const confirmationModal = new conformationModal(
                    $(`#modalContainer`),
                    onYesClick => {
                        if (onYesClick === null || onYesClick === undefined) {
                            return;
                        }

                        if (onYesClick.key === 'removeClientSecret') {
                            clientSecretForm.delete();
                        }
                    }
                );

                const clientIdForm = new ClientIdForm(id, statusAlert);
                const clientSecretForm = new CleintSecretFrom(id, statusAlert, confirmationModal);
            }
        }

        class ClientIdForm {
            constructor(id, statusAlert) {
                this.id = id;
                this.statusAlert = statusAlert;

                const $form = $('#client-id-form');

                this.loader = new DotLoader($('#client-id-loader'), $form);

                this.clientIdInput = new InputComponent($form, '#client-id-input');

                $form.on('click', 'button.update', () => {
                    this.update();
                });

                this.get();
            }

            showClientId(data) {
                this.clientIdInput.value(data.clientId);

                this.loader.hide();
            }

            showErrors(errors) {
                if (errors[''] !== null && errors[''] !== undefined) {
                    this.statusAlert.showErrors(errors['']);
                }

                this.clientIdInput.showError(errors.ClientId);
            }

            hideErrors() {
                this.statusAlert.hide();

                this.clientIdInput.hideError();
            }

            get() {
                this.loader.show();
                this.hideErrors();

                Api.get(`/api/IdentityAdmin/Client/GetClientId/${this.id}`)
                    .done((data) => {
                        this.showClientId(data);
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON);
                        this.loader.hide();
                    });
            }

            getData() {
                return {
                    clientId: this.clientIdInput.value()
                }
            }

            update() {
                this.loader.show();
                this.hideErrors();

                Api.post(`/api/IdentityAdmin/Client/UpdateClientId/${this.id}`, this.getData())
                    .done((data) => {
                        this.showClientId(data);
                        this.statusAlert.showSuccess('ClientId was updated');
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON);
                        this.loader.hide();
                    });
            }
        }

        class CleintSecretFrom {
            constructor(id, statusAlert, confirmationModal) {
                this.id = id;
                this.statusAlert = statusAlert;
                this.confirmationModal = confirmationModal;

                const $form = $('#client-secret-form');

                this.loader = new DotLoader($('#client-secret-loader'), $form);

                this.clientSecretInput = new InputComponent($form, '#client-secret-input');

                this.$addButton = $form.find('button.add');
                this.$updateButton = $form.find('button.update');
                this.$deleteButton = $form.find('button.delete');

                this.$addButton.on('click', () => {
                    this.add();
                });

                this.$updateButton.on('click', () => {
                    this.update();
                });

                this.$deleteButton.on('click', () => {
                    this.confirmationModal.show({ key: 'removeClientSecret' }, 'Are you sure you want to remove Client Secret?');
                });

                this.get();
            }

            showSecret(data) {
                this.clientSecretInput.value(null);

                if (data.isSecretSet) {
                    this.$addButton.hide();
                    this.$updateButton.show();
                    this.$deleteButton.show();
                }
                else {
                    this.$addButton.show();
                    this.$updateButton.hide();
                    this.$deleteButton.hide();
                }

                this.loader.hide();
            }

            showErrors(errors) {
                if (errors[''] !== null || errors[''] !== undefined) {
                    this.statusAlert.showErrors(errors['']);
                }

                this.clientSecretInput.showError(errors.ClientSecret);
            }

            hideErrors() {
                this.statusAlert.hide();

                this.clientSecretInput.hideError();
            }

            get() {
                this.loader.show();
                this.hideErrors();

                Api.get(`/api/IdentityAdmin/Client/GetClientSecret/${this.id}`)
                    .done((data) => {
                        this.showSecret(data);
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON);
                        this.loader.hide();
                    });
            }

            getData() {
                return {
                    clientsecret: this.clientSecretInput.value()
                };
            }

            update() {
                this.loader.show();
                this.hideErrors();

                Api.post(`/api/IdentityAdmin/Client/UpdateClientSecret/${this.id}`, this.getData())
                    .done(() => {
                        this.get();
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON);
                        this.loader.hide();
                    })
            }

            add() {
                this.loader.show();
                this.hideErrors();

                Api.post(`/api/IdentityAdmin/Client/AddClientSecret/${this.id}`, this.getData())
                    .done(() => {
                        this.get();
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON);
                        this.loader.hide();
                    })
            }

            delete() {
                this.loader.show();
                this.hideErrors();

                Api.delete(`/api/IdentityAdmin/Client/DeleteClientSecret/${this.id}`)
                    .done(() => {
                        this.get();
                    })
                    .fail((response) => {
                        this.showErrors(response.responseJSON);
                        this.loader.hide();
                    })
            }
        }
    </script>
}
