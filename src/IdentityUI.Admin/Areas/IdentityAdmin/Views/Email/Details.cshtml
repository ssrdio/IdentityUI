@using SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Views.Shared.Components.SettingMenu
@model SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Models.Setting.Email.EmailViewModel

@{
    SidebarSelection.SelectedOption = SidebarOptions.Setting;
}

@{
    ViewData["Title"] = "Email";
}

@section style {
<style>
    .preview-iframe {
        border: none;
        min-height: 400px;
        max-height: 600px;
        padding: 0px;
    }
</style>
}

@section script{
    <script>
        $(document).ready(() => {
            new EmailDetails(@Model.Id);
        });

        class EmailDetails {
            constructor(id) {
                this.id = id;

                this.statusAlert = new StatusAlertComponent('#status-alert-container');

                this.sendTestEmailModal = new SendTestEmailModal(id, () => {
                    this.statusAlert.showSuccess('Test email was sent');
                });

                this.$previewModal = $('#email-preview-modal');

                this.$bodyTextArea = $('#body-textarea');
                this.$previewIframe = $('#preview-iframe');

                $('#preview-button').on('click', () => {
                    this.showPreview();
                });

                this.$previewModal.on('hidden.bs.modal', () => {
                    this.hidePreview();
                });

                $('#send-test-email').on('click', () => {
                    this.sendTestEmailModal.showModal();
                });

                @if (Model.StatusAlert != null)
                {
                    <text>
                        if ('@Model.StatusAlert.Success' === 'True')
                        {
                            this.statusAlert.showSuccess(@Json.Serialize(Model.StatusAlert.Messages));
                        }
                        else
                        {
                            this.statusAlert.showError(@Json.Serialize(Model.StatusAlert.Messages));
                        }
                    </text>
                }
            }

            showPreview() {
                const body = this.$bodyTextArea.val();

                var iDoc = this.$previewIframe[0].contentDocument;

                iDoc.open();
                iDoc.write(body);
                iDoc.close();

                this.$previewModal.modal('show');
            }

            hidePreview() {
                this.$previewModal.modal('hide');
            }
        }

        class SendTestEmailModal {
            constructor(emailId, successCallback) {
                this.emailId = emailId;
                this.successCallback = successCallback;

                this.$sendTesEmailModal = $('#send-test-email-modal');
                this.$sendTesEmailModal.on('hidden.bs.modal', () => {
                    this.hideErrors();
                });

                const $sendTestEmailForm = this.$sendTesEmailModal.find('#send-test-email-form');
                this.emailInputComponent = new InputComponent($sendTestEmailForm, '#email-input');

                this.errorAlert = new ErrorAlert($sendTestEmailForm);

                this.$sendTesEmailModal.on('click', 'button.confirm', () => {
                    this.sendTestEmail();
                });
            }

            showModal() {
                this.$sendTesEmailModal.modal('show');
            }

            showErrors(errors) {
                if (errors[''] !== null && errors[''] !== undefined) {
                    this.errorAlert.showErrors(errors['']);
                }

                this.emailInputComponent.showError(errors.Email);
            }

            hideErrors() {
                this.errorAlert.hide();
                this.emailInputComponent.hideError();
            }

            getData() {
                return {
                    email: this.emailInputComponent.value()
                };
            }

            sendTestEmail() {
                this.hideErrors();
                const data = this.getData();

                Api.post(`/IdentityAdmin/Setting/Email/SendTest/${this.emailId}`, data)
                    .done(() => {
                        this.$sendTesEmailModal.modal('hide');
                        if (this.successCallback) {
                            this.successCallback();
                        }
                    })
                    .fail((resp) => {
                        //this.emailInputComponent.value(null);
                        this.showErrors(resp.responseJSON);
                    });
            }
        }
    </script>

}

<div id="email-preview-modal" class="modal fade bd-example-modal-lg" role="dialog" aria-labelledby="email-preview-modal" style="display: none;" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Email Preview</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body audit-modal-body">
                <iframe id="preview-iframe" title="Email Preview" class="col-12 preview-iframe"></iframe>
            </div>
        </div>
    </div>
</div>

<div>
    @(await Component.InvokeAsync("SettingMenu", new SettingMenuViewComponent.ViewModel("Email", SettingMenuViewComponent.TabSelected.Email)))

    <div id="status-alert-container">
        @await Component.InvokeAsync("IdentityStatusAlertJs")
    </div>

    @if (Model.UseEmailSender)
    {
        @await Component.InvokeAsync("SendTestEmailModal")
    }

    <div class="tab-content">
        <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12 form-card">
            <div class="card-body">
                <div class="card-title-space">
                    <h5 class="card-title">
                        Details
                    </h5>

                </div>
                <form asp-controller="Email" asp-action="Edit" asp-route-id="@Model.Id" method="post" class="custom-form">
                    <div class="form-group">
                        <label asp-for="Type" class="control-label"></label>
                        <input asp-for="Type" class="form-control disabled" disabled />
                        <span asp-validation-for="Type" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Subject" class="control-label"></label>
                        <input asp-for="Subject" class="form-control" />
                        <span asp-validation-for="Subject" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <div class="d-flex preview-holder">
                            <label asp-for="Body" class="control-label"></label>
                            <button id="preview-button" type="button" class="btn btn-link p-2 d-flex ml-auto reset-button">Preview</button>
                        </div>
                        <textarea id="body-textarea" asp-for="Body" class="form-control vertical-textarea" rows="10"></textarea>
                        <span asp-validation-for="Body" class="text-danger"></span>
                    </div>
                    <div class="button-holder">



                    </div>
                    <div class="button-holder button-holder-remove-margin">
                        @if (Model.UseEmailSender)
                        {
                            <button id="send-test-email" class="btn btn-secondary custom-submit">Send Test Email</button>
                        }
                        <button type="submit" class="btn btn-primary custom-submit">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>