@using SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Views.Group.Components.GroupMenu
@model SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Models.Group.GroupInviteViewModel
@{
    SidebarSelection.SelectedOption = SidebarOptions.Group;
}

@inject SSRD.IdentityUI.Core.Interfaces.Services.IIdentityUIUserInfoService _identityUIUserInfoService;

@{
    ViewData["Title"] = "Groups";
}

@section script{
    <script src="~/identityAdmin/app/group/group-invite-modal.js"></script>
    <script>
        $(document).ready(function () {
            new GroupInvites('@Model.GroupId', '@Json.Serialize(Model.CanAssignRoles)');
        });

        class GroupInvites {
            constructor(groupId, canAssignRoles) {
                this.groupId = groupId;
                this.canAssignRoles = JSON.parse(canAssignRoles);

                this.$inviteTable = $('#invite-table');
                this.initTable();

                this.statusAlert = new StatusAlertComponent('#status-alert-container');

                this.confirmationModal = new conformationModal(
                    $('#modal-container'),
                    onYesClick => {
                        if (onYesClick === null || onYesClick === undefined) {
                            return;
                        }

                        if (onYesClick.key === 'removeInvite') {
                            this.remove(onYesClick.id);
                        }
                    });

                const inviteUserModal = new InviteToGroupModel(this.groupId, this.canAssignRoles, () => {
                    this.statusAlert.showSuccess("User was invited");
                    this.reloadTable();
                });

                $('#invite-user-button').on('click', () => {
                    inviteUserModal.showModal();
                });
            }

            initTable() {
                this.$inviteTable.DataTable({
                    serverSide: true,
                    processing: true,
                    "targets": 'no-sort',
                    "bSort": false,
                    "order": [],
                    ajax: {
                        url: `/IdentityAdmin/Group/${this.groupId}/GroupInvite/Get`,
                        type: 'GET'
                    },
                    columns: [
                        {
                            data: "email",
                            title: "Email",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: "status",
                            title: "Status",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: "groupRole",
                            title: "Group Role",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: "expiresAt",
                            title: "Expires At",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: null,
                            className: "dt-head-center",
                            width: "160px",
                            render: function (data) {
                                return `
                            <div >
                                <button class="btn btn-danger table-button remove" data-id="${data.id}">Remove</button>
                            </div>`
                            }
                        }
                    ],
                });

                this.$inviteTable.on('click', 'button.remove', (event) => {
                    let id = $(event.target).data("id");
                    this.confirmationModal.show({ key: 'removeInvite', id: id }, 'Are you sure that you want to remove Invite?');
                });
            }

            reloadTable() {
                this.$inviteTable
                    .DataTable()
                    .clear()
                    .draw();
            }

            remove(id) {
                this.statusAlert.hide();

                Api.post(`/IdentityAdmin/Group/${this.groupId}/GroupInvite/Remove/${id}`)
                    .done(() => {
                        this.reloadTable();
                        this.statusAlert.showSuccess('Invite was removed');
                    })
                    .fail((resp) => {
                        this.reloadTable();
                        this.statusAlert.showErrors(resp.responseJSON['']);
                    })
            }
        }
    </script>
}

@section modal{
    <div id="modal-container">
        @if (_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_INVITE_USERS))
        {
            @await Component.InvokeAsync("InviteToGroupModal")
        }

        @await Component.InvokeAsync("IdentityConfirmationModal")
    </div>
}

<div id="status-alert-container">
    @await Component.InvokeAsync("IdentityStatusAlertJs")
</div>

<div>
    @(await Component.InvokeAsync("GroupMenu", Model.ToViewComponent(GroupMenuViewComponent.TabSelected.Invites)))

    <div class="tab-content">
        <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12 table-card">
            <div class="card-body">
                <div class="card-title-space">
                    <h5 class="card-title">
                        Invites
                    </h5>
                    @if (_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_INVITE_USERS))
                    {
                        <button id="invite-user-button" class="header-button">Invite User</button>
                    }
                </div>
                <div class="custom_container custom_table">
                    <table id="invite-table" class="dataTableClass display "></table>
                </div>
            </div>
        </div>
    </div>
</div>