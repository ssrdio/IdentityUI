@model SSRD.IdentityUI.Admin.Areas.GroupAdmin.Models.User.GroupAdminUserIndexViewModel

@inject SSRD.IdentityUI.Core.Interfaces.Services.IIdentityUIUserInfoService _identityUIUserInfoService;
@inject Microsoft.Extensions.Options.IOptions<SSRD.IdentityUI.Core.Models.Options.IdentityUIEndpoints> _identityUIEndpoints;

@{
    GroupAdminSidebarSelection.SelectedOption = GroupAdminSidebarOptions.User;
}

@{
    ViewData["Title"] = "Groups";
}

@section script{
    <script>
        $(document).ready(function () {
            new GroupUsers(
                '@Model.GroupId',
                '@_identityUIUserInfoService.GetUserId()',
                '@Json.Serialize(Model.CanMangeGroupRoles)',
                '@Json.Serialize(Model.CanAssigneGroupRoles)',
                '@_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_MANAGE_ROLES)' === 'True',
                '@_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_REMOVE_USERS)' === 'True',
                '@Model.CanChangeOwnRole' === 'True',
                '@_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_ACCESS_USER_DETAILS)' === 'True')
        });

        class GroupUsers {
            constructor(groupId, userId, canManageRoles, canAssigneRoles, hasRoleManagmentPermission, hasRemovePermission, canChangeOwnRole, canAccessUserDetails) {
                this.groupId = groupId;
                this.userId = userId;

                this.canManageRoles = JSON.parse(canManageRoles);
                this.canAssigneRoles = JSON.parse(canAssigneRoles);
                this.hasRoleManagmentPermission = hasRoleManagmentPermission;
                this.hasRemovePermission = hasRemovePermission;
                this.canChangeOwnRole = canChangeOwnRole;
                this.canAccessUserDetails = canAccessUserDetails;

                const addExistingUserModal = new AddExistingUser(groupId, this.canAssigneRoles, () => {
                    this.reloadTable();

                    this.statusAlert.showSuccess('Added existing user to group');
                });

                $('#add-existing-user-button').on('click', () => {
                    addExistingUserModal.showModal();
                });

                this.confirmationModal = new conformationModal(
                    $('#modal-container'),
                    onYesClick => {
                        if (onYesClick === null || onYesClick === undefined) {
                            return;
                        }

                        if (onYesClick.key === 'removeUser') {
                            this.remove(onYesClick.id);
                        }
                        else if (onYesClick.key === 'leave') {
                            this.leave();
                        }
                    });

                this.$usersTable = $('#user-table');
                this.initTable();

                this.statusAlert = new StatusAlertComponent('#status-alert-container');

                const inviteUserModal = new GroupAdminInviteToGroupModel(this.groupId, this.canAssigneRoles, () => {
                    this.statusAlert.showSuccess("User was invited");
                });

                $('#invite-user-button').on('click', () => {
                    inviteUserModal.showModal();
                });
            }

            initTable() {
                this.$usersTable.DataTable({
                    serverSide: true,
                    processing: true,
                    "targets": 'no-sort',
                    "bSort": false,
                    "order": [],
                    ajax: {
                        url: `/api/GroupAdmin/${this.groupId}/User/Get`,
                        type: 'GET'
                    },
                    columns: [
                        {
                            data: "userId",
                            title: "Id",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: "username",
                            title: "Username",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: "email",
                            title: "Email",
                            render: $.fn.dataTable.render.text()
                        },
                        {
                            data: null,
                            className: "table-input",
                            title: "Group Role",
                            mRender: (data) => {
                                if (this.hasRoleManagmentPermission) {
                                    if (!this.canManageRoles.some(x => x.id === data.groupRoleId) || (this.userId === data.userId && this.canChangeOwnRole === false)) {
                                        let view = `<select class="form-control" data-id={{groupUserId}} disabled>
                                            {{#groupRoles}}
                                                {{#selected}}
                                                    <option value='{{id}}' selected>{{name}}</option>
                                                {{/selected}}
                                                {{^selected}}
                                                    <option value='{{id}}'>{{name}}</option>
                                                {{/selected}}
                                            {{/groupRoles}}
                                        </select>`;

                                        let templateData = {
                                            groupUserId: data.id,
                                            groupRoles: this.canAssigneRoles.map((obj) => {
                                                obj.selected = obj.id === data.groupRoleId;

                                                return obj;
                                            })
                                        }

                                        if (!templateData.groupRoles.some(x => x.id === data.groupRoleId)) {
                                            templateData.groupRoles.push({ id: data.groupRoleId, name: data.groupRoleName, selected: true });
                                        }

                                        var output = Mustache.render(view, templateData);

                                        return output;
                                    }
                                    else {

                                        let view = `<select class="form-control" data-id={{groupUserId}}>
                                            {{#groupRoles}}
                                                {{#selected}}
                                                    <option value='{{id}}' selected>{{name}}</option>
                                                {{/selected}}
                                                {{^selected}}
                                                    <option value='{{id}}'>{{name}}</option>
                                                {{/selected}}
                                            {{/groupRoles}}
                                        </select>`;

                                        let templateData = {
                                            groupUserId: data.id,
                                            groupRoles: this.canAssigneRoles.map((obj) => {
                                                obj.selected = obj.id === data.groupRoleId;

                                                return obj;
                                            })
                                        }

                                        if (!templateData.groupRoles.some(x => x.id === data.groupRoleId)) {
                                            templateData.groupRoles.push({ id: data.groupRoleId, name: data.groupRoleName, selected: true });
                                        }

                                        var output = Mustache.render(view, templateData);

                                        return output;
                                    }
                                }
                                else {
                                    var view = '<span>{{groupRole}}</span>';
                                    var output = Mustache.render(view, { groupRole: data.groupRoleName });

                                    return output
                                }
                            }
                        },
                        {
                            data: null,
                            className: "dt-head-center",
                            width: "250px",
                            mRender: (data) => {
                                if (data.userId === this.userId) {
                                    if (this.canAccessUserDetails) {
                                        return `
                                            <div>
                                                <button class="btn btn-danger table-button leave">Leave</button>
                                                <button class="btn btn-primary table-button details" data-id=${data.id}>Details</button>
                                            </div>`
                                    }
                                    else {
                                        return `<div><button class="btn btn-danger table-button leave">Leave</button></div>`
                                    }
                                }

                                if (this.hasRemovePermission && this.canManageRoles.some(x => x.id === data.groupRoleId)) {
                                    if (this.canAccessUserDetails) {
                                        return `
                                        <div>
                                            <button class="btn btn-danger table-button remove" data-id=${data.id}>Remove</button>
                                            <button class="btn btn-primary table-button details" data-id=${data.id}>Details</button>
                                        </div>`;
                                    }
                                    else {
                                        return `
                                        <div>
                                            <button class="btn btn-danger table-button remove" data-id=${data.id}>Remove</button>
                                        </div>`;
                                    }
                                }

                                return ``;
                            }
                        }
                    ],
                });

                this.$usersTable.on('click', 'button.remove', (event) => {
                    let id = $(event.target).data("id");
                    this.confirmationModal.show({ key: 'removeUser', id: id }, 'Are you sure that you want to remove User from Group?');
                });

                this.$usersTable.on('click', 'button.leave', () => {
                    this.confirmationModal.show({ key: 'leave' }, 'Are you sure that you want to leave the Group?');
                });

                this.$usersTable.on('click', 'button.details', (event) => {
                    let id = $(event.target).data("id");

                    window.location = `/GroupAdmin/${this.groupId}/User/Details/${id}/`;
                });

                this.$usersTable.on('change', 'select', (event) => {
                    let $select = $(event.target);

                    let id = $select.data('id');
                    let value = $select.val();

                    this.changeRole(id, value);
                });
            }

            reloadTable() {
                this.$usersTable
                    .DataTable()
                    .clear()
                    .draw();
            }

            remove(id) {
                this.statusAlert.hide();

                Api.post(`/api/GroupAdmin/${this.groupId}/User/Remove/${id}`)
                    .done(() => {
                        this.reloadTable();
                        this.statusAlert.showSuccess('User was removed from group');
                    })
                    .fail((resp) => {
                        this.reloadTable();
                        this.statusAlert.showErrors(resp.responseJSON['']);
                    })
            }

            leave() {
                this.statusAlert.hide();

                Api.post(`/api/GroupAdmin/${this.groupId}/User/Leave`)
                    .done(() => {
                        window.location.href = '/';
                    })
                    .fail((resp) => {
                        this.statusAlert.showErrors(resp.responseJSON['']);
                    })
            }

            changeRole(id, roleId) {
                this.statusAlert.hide();

                Api.post(`/api/GroupAdmin/${this.groupId}/User/ChangeRole/${id}?roleId=${roleId}`)
                    .done(() => {
                        this.reloadTable();
                        this.statusAlert.showSuccess('User role was changed');
                    })
                    .fail((resp) => {
                        this.reloadTable();
                        this.statusAlert.showErrors(resp.responseJSON['']);
                    })
            }
        }

        class AddExistingUser {
            constructor(groupId, canAssigneRoles, successCallback) {
                this.groupId = groupId;
                this.canAssigneRoles = canAssigneRoles;
                this.successCallback = successCallback;

                this.$addExisingUserModal = $('#add-existing-user-to-group-modal');
                this.$addExisingUserModal.on('hidden.bs.modal', () => {
                    this.userSelectComponent.selectOption(null);
                    this.userSelectComponent.triggerChange();
                    this.rolesSelectComponent.selectOption(null);
                    this.rolesSelectComponent.triggerChange();

                    this.hideErrors();
                });
                this.$addExisingUserModal.on('click', 'button.confirm', () => {
                    this.add();
                });

                const $form = this.$addExisingUserModal.find('#add-existing-user-to-group-from');
                this.$userSelect = $form.find('#existing-user-select .select2-container')
                this.userSelectComponent = new SelectComponent($form, '#existing-user-select');

                this.$rolesSelect = $form.find('#group-role-select .select2-container')
                this.rolesSelectComponent = new SelectComponent($form, '#group-role-select');

                this.errorAlert = new ErrorAlert($form);

                this.initUserSelect();
                this.initRolesSelct();
            }

            initUserSelect() {
                this.$userSelect.select2({
                    ajax: {
                        url: `/api/GroupAdmin/${this.groupId}/User/GetAvailable`,
                        type: 'GET',
                        dataType: 'json',
                        delay: 250
                    },
                    placeholder: 'Select User'
                });
            }

            initRolesSelct() {
                let data = this.canAssigneRoles.map((element) => {
                    return {
                        id: element.id,
                        text: element.name
                    }
                });

                this.$rolesSelect.select2({
                    data: data,
                    placeholder: 'Select Group Role'
                });

                this.rolesSelectComponent.selectOption(null);
            }

            showModal() {
                this.$addExisingUserModal.modal('show');
            }

            showErrors(errors) {
                if (errors[''] !== null && errors[''] !== undefined) {
                    this.errorAlert.showErrors(errors['']);
                }

                this.userSelectComponent.showError(errors.UserId);
                this.rolesSelectComponent.showError(errors.GroupRoleId);
            }

            hideErrors() {
                this.errorAlert.hide();

                this.userSelectComponent.hideError();
                this.rolesSelectComponent.hideError();
            }

            getData() {
                return {
                    userId: this.userSelectComponent.value(),
                    groupRoleId: this.rolesSelectComponent.value(),
                }
            }

            add() {
                this.hideErrors();
                const data = this.getData();

                console.log(data);

                Api.post(`/api/GroupAdmin/${this.groupId}/User/AddExisting`, data)
                    .done(() => {
                        this.$addExisingUserModal.modal('hide');

                        if (this.successCallback) {
                            this.successCallback();
                        }
                    })
                    .fail((resp) => {
                        this.showErrors(resp.responseJSON);
                    })
            }
        }

        class GroupAdminInviteToGroupModel {
            constructor(groupId, canAssignRoles, successCallback) {
                this.groupId = groupId;
                this.canAssignRoles = canAssignRoles;
                this.successCallback = successCallback;

                this.$inviteUserModal = $('#invite-user-modal');
                this.$inviteUserModal.on('hidden.bs.modal', () => {
                    this.emailInputComponent.value(null);
                    this.rolesSelectComponent.selectOption(null);
                    this.rolesSelectComponent.triggerChange();

                    this.hideErrors();
                });
                this.$inviteUserModal.on('click', 'button.confirm', () => {
                    this.add();
                });

                const $form = this.$inviteUserModal.find('#invite-user-form');
                this.emailInputComponent = new InputComponent($form, '#email-input');

                this.$rolesSelect = $form.find('#group-role-select .select2-container')
                this.rolesSelectComponent = new SelectComponent($form, '#group-role-select');

                this.errorAlert = new ErrorAlert($form);

                this.initRolesSelct();
            }

            initRolesSelct() {
                let data = this.canAssignRoles.map((element) => {
                    return {
                        id: element.id,
                        text: element.name
                    }
                });

                this.$rolesSelect.select2({
                    data: data,
                    placeholder: 'Select Group Role'
                });

                this.rolesSelectComponent.selectOption(null);
            }

            showModal() {
                this.$inviteUserModal.modal('show');
            }

            showErrors(errors) {
                if (errors[''] !== null && errors[''] !== undefined) {
                    this.errorAlert.showErrors(errors['']);
                }

                this.emailInputComponent.showError(errors.Email);
                this.rolesSelectComponent.showError(errors.GroupRoleId);
            }

            hideErrors() {
                this.errorAlert.hide();

                this.emailInputComponent.hideError();
                this.rolesSelectComponent.hideError();
            }

            getData() {
                return {
                    email: this.emailInputComponent.value(),
                    groupRoleId: this.rolesSelectComponent.value(),
                }
            }

            add() {
                this.hideErrors();
                const data = this.getData();

                Api.post(`/api/GroupAdmin/${this.groupId}/Invite/Add`, data)
                    .done(() => {
                        this.$inviteUserModal.modal('hide');

                        if (this.successCallback) {
                            this.successCallback();
                        }
                    })
                    .fail((resp) => {
                        this.showErrors(resp.responseJSON);
                    })
            }
        }

    </script>
}

@section modal{
    <div id="modal-container">
        @if (_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_ADD_EXISTING_USERS))
        {
            @await Component.InvokeAsync("AddExistingUserToGroupModal")
        }

        @if (_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_INVITE_USERS)
           && _identityUIEndpoints.Value.UseEmailSender.HasValue && _identityUIEndpoints.Value.UseEmailSender.Value)
        {
            @await Component.InvokeAsync("InviteToGroupModal")
        }

        @await Component.InvokeAsync("IdentityConfirmationModal")
    </div>
}

<div id="status-alert-container">
    @await Component.InvokeAsync("IdentityStatusAlertJs")
</div>

<div>
    <div class="tab-content">
        <div class="main-card mb-3 card fullWidthCard table-card">
            <div class="card-body">
                <div class="card-title-space">
                    <h5 class="card-title">
                        Users:
                    </h5>
                    <div id="actions-dropdown" class="dropdown">
                        <button class="btn btn-secondary header-button header-button-dropdown" type="button" data-toggle="dropdown">
                            Actions
                            <i class="fas fa-sort-down"></i>
                        </button>
                        <div class="dropdown-menu">
                            @if (_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_ADD_EXISTING_USERS))
                            {
                                <button id="add-existing-user-button" class="dropdown-item">Add Existing User</button>
                            }
                            @if (_identityUIUserInfoService.HasGroupPermission(IdentityUIPermissions.GROUP_CAN_INVITE_USERS)
&& _identityUIEndpoints.Value.UseEmailSender.HasValue && _identityUIEndpoints.Value.UseEmailSender.Value)
                            {
                                <button id="invite-user-button" class="dropdown-item ">Invite User</button>
                            }
                        </div>
                    </div>
                </div>

                <div class="custom_container custom_table">
                    <table id="user-table" class="dataTableClass display "></table>
                </div>
            </div>
        </div>
    </div>
</div>